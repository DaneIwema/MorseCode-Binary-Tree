package ilstu.edu;

public class MorseTree {

	protected Node root;
	
	private class Node {
		private Node left; 
		private Node right;
		private char letter;
		
		private Node (char letter) {
			this.letter = letter;
		}
		
		public String toString() {
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.append(this.letter);
			return stringBuilder.toString();
		}
	}
	
	public MorseTree() {
		root = new Node(' ');
	}
	
	public void add(char letter, String morse)  { 
        root = addRecursive(root, letter, morse); 
    } 
   
    //recursive insert function
	private Node addRecursive(Node root, char letter, String morse) { 
          //tree is empty
		if (root == null) { 
            root = new Node(letter); 
            return root; 
        } 
        //traverse the tree
        if (letter < root.letter)     //insert in the left subtree
            root.left = addRecursive(root.left, letter, morse.substring(1)); 
        else if (letter > root.letter)    //insert in the right subtree
            root.right = addRecursive(root.right, letter, morse.substring(1)); 
          // return pointer
        return root; 
    } 
    
	public String toString() {
		StringBuilder sb = new StringBuilder();
		preOrder(this.root, sb, 0);
		return sb.toString();
	}
	
	public char decode(String message) {
		
	}
	
    private void preOrder(Node start, StringBuilder sb, int level) {
		for (int i = 0; i<level;i++)
			sb.append("     ");
		if(start==null)
			sb.append("\n");
		else {
			sb.append(start + "\n");
			preOrder(start.left, sb, level+1);
			preOrder(start.right, sb, level+1);
		}
	}
}
