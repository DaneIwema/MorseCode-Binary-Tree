package ilstu.edu;

public class MorseTree {

	protected Node root;
	
	private class Node {
		private Node left; 
		private Node right;
		private char letter;
		
		private Node (char letter) {
			this.letter = letter;
		}
		
		public String toString() {
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.append(this.letter);
			return stringBuilder.toString();
		}
	}
	
	public MorseTree() {
		root = new Node(' ');
	}
	
	public void add(char letter, String morse) { 
		root = add(root, letter, morse); 
	}
	private Node add(Node start, char letter, String morse) {
		if (morse.compareTo("")==0) {
			start = new Node(letter);
			return start;
		}
		if (morse.charAt(0) == '.')
			start.left = add (start.left, letter, morse.substring(1));
		if (morse.charAt(0) == '-')
			start.right = add (start.right, letter, morse.substring(1));
		return start;
	}
    
	public String toString() {
		StringBuilder sb = new StringBuilder();
		preOrder(this.root, sb, 0);
		return sb.toString();
	}
	
	public char decode(String encodedLetter) {
		return decode(root, encodedLetter);
	}
	private char decode(Node start, String encodedLetter) {
		if (encodedLetter.compareTo("")==0)
			return start.letter;
		if (encodedLetter.charAt(0) == '.')
			return decode(start.left, encodedLetter.substring(1));
		return decode(start.left, encodedLetter.substring(1));
	}
	
    private void preOrder(Node start, StringBuilder sb, int level) {
		for (int i = 0; i<level;i++)
			sb.append("     ");
		if(start==null)
			sb.append("\n");
		else {
			sb.append(start + "\n");
			preOrder(start.left, sb, level+1);
			preOrder(start.right, sb, level+1);
		}
	}
}
